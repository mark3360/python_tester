import os
import re
import pandas as pd
import numpy as np
import time
from IPython.display import display
from timeout_decorator import timeout


class Test:
    def __init__(self, name, time, full_marks, test, student_function):
        self.name = name    # Name of test
        self.time = time    # Time allotted to run test in seconds 
        self.full_marks = full_marks   # Maximum marks on the test
        self.the_test = test 
        self.funct = student_function

# the_test is Function that takes in a function and tests that function, returns list containing
# marks awarded and feedback
                             
    
    
    
    
class Tester:
    feedback = ""
    marks_earned = 0
    total_marks = 0
    
    #expected is "correct" result, close is a list for awarding part marks.
    def run_test(self, test):
        student_function = test.funct
        self.total_marks += test.full_marks
        marks_awarded = 0
        self.feedback += f"{test.name}: " 
        
        if student_function == None:
            self.feedback += "Function Undefined!\n"
        else:
            try:
                @timeout(test.time)
                def f():
                    return test.the_test(student_function)
                result = f()
                marks_awarded = result[0]
                test_feedback = result[1]
                self.feedback += test_feedback
            
            except TimeoutError as e:
                self.feedback +=  f"Function {student_function.__name__} timed out with time limit {test.time}"
            except:
                self.feedback += f"Function {student_function.__name__} encountered error while running"
            
        self.marks_earned += marks_awarded
        self.feedback += "\n"
        self.feedback += f"{marks_awarded} / {test.full_marks}"
        self.feedback += "\n"
        self.feedback += "\n"


# Consumes a list of student functions (as strings), and returns the list containing the actual student functions.
def load_functions(lst):
    ans = []
    for f in lst:
        try:
            exec(f"ans.append({f})",globals(), locals())
        except:
            ans.append(None)
    return ans

##########################################################################################################
##########################################################################################################
# Define tests here.
# Order is name, time, full_marks, test


data_original = pd.DataFrame(data = { "Year" : [1,2,3,4,5],
                             "Cash Flows": [2000, 4000, 0, 0, 25000],
                             "Spot Rate": [0.03, 0.034, 0.037, 0.039, 0.04]}).set_index("Year")

data2 = pd.DataFrame(data = { "Year" : [1,2,3,4,5,6],
                             "Cash Flows": [2000, 4000, 0, 0, 25000, 8000],
                             "Spot Rate": [0.03, 0.034, 0.037, 0.039, 0.04, 0.05]}).set_index("Year")


data3 = pd.DataFrame(data = { "Year" : [1],
                             "Cash Flows": [309],
                             "Spot Rate": [0.03]}).set_index("Year") 

def npv_test1(f):
    res = f(data_original, 25000)
    pts = 0
    ans = 1231.19

    if round(res, 2) == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, saw {res}, but expected {ans}"
    return [pts, feedback]

def npv_test2(f):
    res = f(data2, 50000)
    pts = 0
    ans = -17799.08

    if round(res, 2) == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, saw {res}, but expected {ans}"
    return [pts, feedback]

def npv_test3(f):
    res = f(data3, 0)
    pts = 0
    ans = 300

    if round(res, 2) == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, saw {res}, but expected {ans}"
    return [pts, feedback]

def enpv_test1(f):
    path = "data_original.csv"
    pts = 0
    res = f(path)
    ans = -17.36
    
    if round(res, 2) == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, saw {res}, but expected {ans}"
    return [pts, feedback]


def enpv_test2(f):
    path = "data2.csv"
    pts = 0
    res = f(path)
    ans = -16.06
    
    if round(res, 2) == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, saw {res}, but expected {ans}"
    return [pts, feedback]

def enpv_test3(f):
    path = "row1.csv"
    pts = 0
    res = f(path)
    ans = 5.42
    
    if round(res, 2) == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, saw {res}, but expected {ans}"
    return [pts, feedback]


# Load student functions
sf = load_functions(["NPV", "exp_NPV"])

npv_1 = Test("npv_test1",10, 1, npv_test1, sf[0])
npv_2 = Test("npv_test2",10, 1, npv_test2, sf[0])
npv_3 = Test("npv_test_zero_cost",10, 1, npv_test3, sf[0])

enpv_1 = Test("exp_npv_test1",80, 1, enpv_test1, sf[1])
enpv_2 = Test("exp_npv_test2",20, 1, enpv_test2, sf[1])
enpv_3 = Test("exp_npv_test3",10, 1, enpv_test3, sf[1])




# Place all tests in list below
the_tests = [npv_1, npv_2, npv_3, enpv_1, enpv_2, enpv_3]


##########################################################################################################
##########################################################################################################
## The actual testing

directory = "A1/"

filename = os.path.basename(__file__)
lst = filename.split(" - ")
del lst[4:]

(file_id, name, watiam, fileid) = lst


print(f"Testing {watiam}") 

feedback = f"Feedback for {watiam}:\n\n"

the_tester = Tester()
    
    
        
for test in the_tests:
    the_tester.run_test(test)

feedback += the_tester.feedback
total = the_tester.total_marks
score = the_tester.marks_earned
x = round(100*score/total, 4)


feedback += f"Total: {score}/{total}:         {x}% \n"

filename = "../feedback/" + file_id + " - " +  name + " - " +  watiam + " - " +  "feedback.txt"

with open(filename, 'w') as fp:
	fp.write(feedback)

grades_df = pd.read_csv("../grades.csv").set_index("Username")
grades_df.at["#" + watiam, "Module 3 Python Points Grade <Numeric MaxPoints:100 Weight:6.25 Category:Python exercises CategoryWeight:20>"] = x

grades_df.to_csv("../grades.csv")
