import os
import re
import pandas as pd
import numpy as np
import time
from IPython.display import display
from timeout_decorator import timeout


class Test:
    def __init__(self, name, time, full_marks, test, student_function):
        self.name = name    # Name of test
        self.time = time    # Time allotted to run test in seconds 
        self.full_marks = full_marks   # Maximum marks on the test
        self.the_test = test 
        self.funct = student_function

# the_test is Function that takes in a function and tests that function, returns list containing
# marks awarded and feedback
                             
    
    
    
    
class Tester:
    feedback = ""
    marks_earned = 0
    total_marks = 0
    
    #expected is "correct" result, close is a list for awarding part marks.
    def run_test(self, test):
        student_function = test.funct
        self.total_marks += test.full_marks
        marks_awarded = 0
        self.feedback += f"{test.name}: " 
        
        if student_function == None:
            self.feedback += "Function Undefined!\n"
        else:
            try:
                @timeout(test.time)
                def f():
                    return test.the_test(student_function)
                result = f()
                marks_awarded = result[0]
                test_feedback = result[1]
                self.feedback += test_feedback
            
            except TimeoutError as e:
                self.feedback +=  f"Function {student_function.__name__} timed out with time limit {test.time}"
            except:
                self.feedback += f"Function {student_function.__name__} encountered error while running"
            
        self.marks_earned += marks_awarded
        self.feedback += "\n"
        self.feedback += f"{marks_awarded} / {test.full_marks}"
        self.feedback += "\n"
        self.feedback += "\n"


# Consumes a list of student functions (as strings), and returns the list containing the actual student functions.
def load_functions(lst):
    ans = []
    for f in lst:
        try:
            exec(f"ans.append({f})",globals(), locals())
        except:
            ans.append(None)
    return ans

##########################################################################################################
##########################################################################################################
# Define tests here.

pf1 = pd.DataFrame(data = {"Beta": [1.2, 1.4], 
                                 "Volatility": [0.25, 0.4],
                                 "Amount Invested": [4000, 6000] })

pf2 = pd.DataFrame(data = {"Beta": [1.2, 1.4, 0.3], 
                                 "Volatility": [0.25, 0.4, 0.2],
                                 "Amount Invested": [4000, 6000, 2000] })

def er_1(f):
    pts = 0
    res = round(f(pf1, 0.02, 0.05), 4)
    ans = 0.086

    if res == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, function returned {res} but expected {ans}"
    return [pts, feedback]

def er_2(f):
    pts = 0
    res = round(f(pf2, 0.03, 0.4), 4)
    ans = 0.49

    if res == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, function returned {res} but expected {ans}"
    return [pts, feedback]

def vol_1(f):
    pts = 0
    res = round(f(pf1, -0.2), 4)
    ans = 0.2408

    if res == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, function returned {res} but expected {ans}"
    return [pts, feedback]

def vol_2(f):
    pts = 0
    res = round(f(pf2, 0.3), 4)
    ans = 0.2524

    if res == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, function returned {res} but expected {ans}"
    return [pts, feedback]

def er2_1(f):
    pts = 0
    res = round(f(0.02, 0.05, 0.16, 0.2408), 4)
    ans = 0.0953

    if res == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, function returned {res} but expected {ans}"
    return [pts, feedback]

def er2_2(f):
    pts = 0
    res = round(f(0.01, 0.04, 0.15, 0.22), 4)
    ans = 0.0687

    if res == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, function returned {res} but expected {ans}"
    return [pts, feedback]

test_beta_frame = pd.DataFrame(data = {
    "CUSIP" : [36020,36021,36022,36023],
    "EXP_RETURN" : [0.03,0.05,0.07,0.08],
    "BETA": [-0.3,1.2, 4.6, 0.23]
})

def capmbeta(f):
    pts = 0
    res = f("monthlycrsp_mod7.csv","factors.CSV").set_index("CUSIP")
    
    res1 = round(res.iloc[0]["EXP_RETURN"], 4) == -0.0320
    res2 = (round(res.iloc[0]["BETA"], 4) == -0.4837) | (round(res.iloc[0]["BETA"], 4) == -0.5287)
    res3 = len(res) == 4

    if res3:
        pts += 1
        if res1 & res2:
            pts += 2
            feedback = "Exp Return and Beta calculated correctly."
        elif res1:
            pts += 1
            feedback = "Exp Return calculated correctly, but Beta calculated incorrectly."
        elif res2:
            pts += 1
            feedback = "Beta calculated correctly, but Exp Return calculated incorrectly."
        else:
            feedback = "Beta and Exp Return calculated incorrectly."
    else:
        feedback = f"Function Returned Dataframe of the wrong length."
    return [pts, feedback]

def slpe(f):
    pts = 0
    res = round(f(test_beta_frame), 4)
    ans1 = 0.0514
    ans2 = 0.0043

    if (res == ans1) | (res == ans2):
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, function returned {res} but expected {ans1} or {ans2}"
    return [pts, feedback]



# Load student functions
sf = load_functions(["expected_return","volatility","expected_return2", "CAPM_beta", "slope"])

# Order is name, time, full_marks, test

test_1  = Test("exp_return test1",10, 1,er_1 , sf[0])
test_2  = Test("exp_return test2",10, 1,er_2 , sf[0])
test_3  = Test("volatility test1",10, 1,vol_1 , sf[1])
test_4  = Test("volatility test2",10, 1,vol_2 , sf[1])
test_5  = Test("exp_return2 test1",10, 1,er2_1 , sf[2])
test_6  = Test("exp_return2 test2",10, 1,er2_2 , sf[2])

test_7  = Test("capm_beta test",20, 3, capmbeta , sf[3])
test_8  = Test("slope test",10, 1, slpe , sf[4])


# Place all tests in list below
the_tests = [test_1,
             test_2,
             test_3,
             test_4,
             test_5,
             test_6,
             test_7,
             test_8]


##########################################################################################################
##########################################################################################################
## The actual testing

filename = os.path.basename(__file__)
lst = filename.split(" - ")
del lst[4:]

(file_id, name, watiam, fileid) = lst


print(f"Testing {watiam}") 

feedback = f"Feedback for {watiam}:\n\n"

the_tester = Tester()
    
    
        
for test in the_tests:
    the_tester.run_test(test)

feedback += the_tester.feedback
total = the_tester.total_marks
score = the_tester.marks_earned
x = round(100*score/total, 4)


feedback += f"Total: {score}/{total}:         {x}% \n"

filename = "../feedback/" + file_id + " - " +  name + " - " +  watiam + " - " +  "feedback.txt"

with open(filename, 'w') as fp:
	fp.write(feedback)

grades_df = pd.read_csv("../grades.csv").set_index("Username")
grades_df.at["#" + watiam, "Module 7 Python Points Grade <Numeric MaxPoints:100 Weight:6.25 Category:Python exercises CategoryWeight:20>"] = x

grades_df.to_csv("../grades.csv")
