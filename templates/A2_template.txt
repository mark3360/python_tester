import os
import re
import pandas as pd
import numpy as np
import time
from timeout_decorator import timeout


class Test:
    def __init__(self, name, time, full_marks, test):
        self.name = name    # Name of test
        self.time = time    # Time allotted to run test in seconds 
        self.full_marks = full_marks   # Maximum marks on the test
        self.the_test = test 

# the_test is Function that takes in a function and tests that function, returns list containing
# marks awarded and feedback
                             
    
    
    
    
class Tester:
    feedback = ""
    marks_earned = 0
    total_marks = 0
    
    #expected is "correct" result, close is a list for awarding part marks.
    def run_test(self, student_function, test):
        self.total_marks += test.full_marks
        marks_awarded = 0
        self.feedback += f"{test.name}:" 
        
        if student_function == None:
            self.feedback += " Function Undefined!\n"
        else:
            try:
                @timeout(test.time)
                def f():
                    return test.the_test(student_function)
                result = f()
                marks_awarded = result[0]
                test_feedback = result[1]
                self.feedback += test_feedback
            
            except TimeoutError as e:
                self.feedback +=  f" Function {student_function.__name__} timed out with time limit {test.time}"
            except:
                self.feedback += f" Function {student_function.__name__} encountered error while running"
            
        self.marks_earned += marks_awarded
        self.feedback += "\n"
        self.feedback += f"{marks_awarded} / {test.full_marks}"
        self.feedback += "\n"
        self.feedback += "\n"


##########################################################################################################
##########################################################################################################
# Define tests here.
# Order is name, time, full_marks, test

def years_test1(f):
    ans = f(250000, 30000, 0.06)
    pts = 0
    if (round(ans, 2) == 11.90) or (ans == 11) or (ans == 12):
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, saw {round(ans, 2)}, but expected 11.90\n"
    return [pts, feedback]

def years_test2(f):
    ans = f(200000, 10000, 0.04)
    pts = 0
    if (round(ans, 2) == 41.04) or (ans == 42) or (ans == 41):
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, saw {round(ans, 2)}, but expected 41.04\n"
    return [pts, feedback]

def irr_test1(f):
    ans = f("data_original.csv")
    pts = 0
    if ans == [45481,30240]:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, saw {ans}, but expected [45481,30240]"
    return [pts, feedback]

def irr_test2(f):
    ans = f("data2.csv")
    pts = 0
    if ans == [994,1183]:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, saw {ans}, but expected [994,1183]"
    return [pts, feedback]

def irr_test3(f):
    ans = f("data3.csv")
    pts = 0
    if ans == [16,106]:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, saw {ans}, but expected [16,106]"
    return [pts, feedback]

yrs_1 = Test("years_test1",10, 1, years_test1)
yrs_2 = Test("years_test2",10, 1, years_test2)

irr_1 = Test("irr_original_data", 80, 1, irr_test1)
irr_2 = Test("irr_new_data_1", 20, 1, irr_test2)
irr_3 = Test("irr_new_data_2", 20, 1, irr_test3)


##########################################################################################################
##########################################################################################################
## The actual testing

directory = "A1/"

filename = os.path.basename(__file__)
lst = filename.split(" - ")
del lst[4:]

(file_id, name, watiam, fileid) = lst


print(f"Testing {watiam}") 

feedback = f"Feedback for {watiam}:\n\n"

the_tester = Tester()
    
    
        
#Attempt to load all student functions
try:
    s_years = years
except:
    s_years = None

try:
    s_irr = IRR
except:
    s_irr = None
 
the_tester.run_test(s_years, yrs_1)
the_tester.run_test(s_years, yrs_2)

the_tester.run_test(s_irr, irr_1)
the_tester.run_test(s_irr, irr_2)
the_tester.run_test(s_irr, irr_3)




feedback += the_tester.feedback
total = the_tester.total_marks
score = the_tester.marks_earned
x = round(100*score/total, 4)


feedback += f"Total: {score}/{total}:         {x}% \n"

filename = "../feedback/" + file_id + " - " +  name + " - " +  watiam + " - " +  "feedback.txt"

with open(filename, 'w') as fp:
	fp.write(feedback)

grades_df = pd.read_csv("../grades.csv").set_index("Username")
grades_df.at["#" + watiam, "Module 2 Python Points Grade <Numeric MaxPoints:100 Weight:6.25 Category:Python exercises CategoryWeight:20>"] = x

grades_df.to_csv("../grades.csv")
