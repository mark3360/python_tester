import os
import re
import pandas as pd
import numpy as np
import time
from IPython.display import display
from timeout_decorator import timeout


class Test:
    def __init__(self, name, time, full_marks, test, student_function):
        self.name = name    # Name of test
        self.time = time    # Time allotted to run test in seconds 
        self.full_marks = full_marks   # Maximum marks on the test
        self.the_test = test 
        self.funct = student_function

# the_test is Function that takes in a function and tests that function, returns list containing
# marks awarded and feedback
                             
    
    
    
    
class Tester:
    feedback = ""
    marks_earned = 0
    total_marks = 0
    
    #expected is "correct" result, close is a list for awarding part marks.
    def run_test(self, test):
        student_function = test.funct
        self.total_marks += test.full_marks
        marks_awarded = 0
        self.feedback += f"{test.name}: " 
        
        if student_function == None:
            self.feedback += "Function Undefined!\n"
        else:
            try:
                @timeout(test.time)
                def f():
                    return test.the_test(student_function)
                result = f()
                marks_awarded = result[0]
                test_feedback = result[1]
                self.feedback += test_feedback
            
            except TimeoutError as e:
                self.feedback +=  f"Function {student_function.__name__} timed out with time limit {test.time}"
            except:
                self.feedback += f"Function {student_function.__name__} encountered error while running"
            
        self.marks_earned += marks_awarded
        self.feedback += "\n"
        self.feedback += f"{marks_awarded} / {test.full_marks}"
        self.feedback += "\n"
        self.feedback += "\n"


# Consumes a list of student functions (as strings), and returns the list containing the actual student functions.
def load_functions(lst):
    ans = []
    for f in lst:
        try:
            exec(f"ans.append({f})",globals(), locals())
        except:
            ans.append(None)
    return ans

##########################################################################################################
##########################################################################################################
# Define tests here.

# Load student functions
sf = load_functions(["call_value","black_scholes_value","implied_volatility", "best_stock_price", "statistics"])

test_data1 = {
    "K" : 25,
    "Stock Price" : 8,
    "rf" : 0.03
}

test_data2 = {
    "K" : 26,
    "Stock Price" : 9,
    "rf" : 0.04
}

def cv_1(f):
    pts = 0
    res = round(f(test_data1), 4)
    ans = 0.7282

    if res == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, function returned {res} but expected {ans}"
    return [pts, feedback]

def cv_2(f):
    pts = 0
    res = round(f(test_data2), 4)
    ans = 1.0

    if res == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, function returned {res} but expected {ans}"
    return [pts, feedback]

def bsv_1(f):
    pts = 0
    res = round(f(80, 60, 0.5, 0.032, 0.24), 4)
    ans = 21.1229

    if res == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, function returned {res} but expected {ans}"
    return [pts, feedback]

def bsv_2(f):
    pts = 0
    res = round(f(70, 61, 0.6, 0.033, 0.25), 4)
    ans = 11.6640

    if res == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, function returned {res} but expected {ans}"
    return [pts, feedback]

def iv_1(f):
    pts = 0
    res = round(f(5.20, 60, 0.5, 0.03), 4)
    ans = 0.2826

    if res == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, function returned {res} but expected {ans}"
    return [pts, feedback]

def iv_2(f):
    pts = 0
    res = round(f(6, 70, 1, 0.04), 4)
    ans = 0.1644

    if res == ans:
        feedback = "Test passed!"
        pts = 1
    else:
        feedback = f"Test failed, function returned {res} but expected {ans}"
    return [pts, feedback]

def bsp_1(f):
    pts = 0
    res = f(55, 65, 60, 0.03, 0.2826)
    res1 = res[0]
    res2 = round(res[1], 4)
    ans1 = 65
    ans2 = 4.4546

    if (res1 == ans1) & (res2 == ans2):
        feedback = "Test passed!"
        pts = 2
    elif (res1 == ans1) | (res2 == ans2):
        feedback = f"Returned [{res1},{res2}], but expected [{ans1}, {ans2}]"
        pts = 1
    else:
        feedback = f"Returned [{res1},{res2}], but expected [{ans1}, {ans2}]"
    return [pts, feedback]

def bsp_2(f):
    pts = 0
    res = f(40, 68, 60, 0.04, 0.3)
    res1 = res[0]
    res2 = round(res[1], 4)
    ans1 = 68
    ans2 = 8.2549

    if (res1 == ans1) & (res2 == ans2):
        feedback = "Test passed!"
        pts = 2
    elif (res1 == ans1) | (res2 == ans2):
        feedback = f"Returned [{res1},{res2}], but expected [{ans1}, {ans2}]"
        pts = 1
    else:
        feedback = f"Returned [{res1},{res2}], but expected [{ans1}, {ans2}]"
    return [pts, feedback]


def stats_1(f):
    pts = 1
    res = f(727, 60, 0.1, 0.2826, 0.03, 55, 65, 30)
    mean_p = round(res["Mean Profit"], 4)
    max_p = round(res["Maximum Profit"], 4)
    min_p = round(res["Minimum Profit"], 4)

    mean_a = 0.7670
    max_a = 4.4182
    min_a = -6.1025

    if (mean_a == mean_p):
        pts += 1
    if (max_a == max_p):
        pts += 1
    if (min_a == min_p):
        pts += 1

    if pts == 4:
        feedback = "Test Passed!"
    else:
        feedback = f"Test failed, function returned Mean: {mean_p}, Max: {max_p}, Min: {min_p}, but expected Mean: {mean_a}, Max: {max_a}, Min: {min_a}"

    return [pts, feedback]

def stats_2(f):
    pts = 1
    res = f(700, 65, 0.2, 0.3, 0.04, 53, 67, 35) 
    mean_p = round(res["Mean Profit"], 4)
    max_p = round(res["Maximum Profit"], 4)
    min_p = round(res["Minimum Profit"], 4)

    mean_a = 0.9059
    max_a = 3.8139
    min_a = -10.1605

    if (mean_a == mean_p):
        pts += 1
    if (max_a == max_p):
        pts += 1
    if (min_a == min_p):
        pts += 1

    if pts == 4:
        feedback = "Test Passed!"
    else:
        feedback = f"Test failed, function returned Mean: {mean_p}, Max: {max_p}, Min: {min_p}, but expected Mean: {mean_a}, Max: {max_a}, Min: {min_a}"

    return [pts, feedback]




# Order is name, time, full_marks, test

test_1  = Test("call_value test1",10, 1,cv_1 , sf[0])
test_2  = Test("call_value test2",10, 1,cv_2 , sf[0])

test_3  = Test("black_scholes test1",10, 1,bsv_1 , sf[1])
test_4  = Test("black_scholes test2",10, 1,bsv_2 , sf[1])

test_5  = Test("implied_volatility test1",10, 1,iv_1 , sf[2])
test_6  = Test("implied_volatility test2",10, 1,iv_2 , sf[2])

test_7  = Test("best_stock_price test1",20, 2, bsp_1 , sf[3])
test_8  = Test("best_stock_price test2",20, 2, bsp_2 , sf[3])


test_9  = Test("statistics test1",20, 4, stats_1 , sf[4])
test_10  = Test("statistics test2",20, 4, stats_2 , sf[4])

# Place all tests in list below
the_tests = [test_1,
             test_2,
             test_3,
             test_4,
             test_5,
             test_6,
             test_7,
             test_8,
             test_9,
             test_10]


##########################################################################################################
##########################################################################################################
## The actual testing

filename = os.path.basename(__file__)
lst = filename.split(" - ")
del lst[4:]

(file_id, name, watiam, fileid) = lst


print(f"Testing {watiam}") 

feedback = f"Feedback for {watiam}:\n\n"

the_tester = Tester()
    
    
        
for test in the_tests:
    the_tester.run_test(test)

feedback += the_tester.feedback
total = the_tester.total_marks
score = the_tester.marks_earned
x = round(100*score/total, 4)


feedback += f"Total: {score}/{total}:         {x}% \n"

filename = "../feedback/" + file_id + " - " +  name + " - " +  watiam + " - " +  "feedback.txt"

with open(filename, 'w') as fp:
	fp.write(feedback)

grades_df = pd.read_csv("../grades.csv").set_index("Username")
grades_df.at["#" + watiam, "Module 8 Python Points Grade <Numeric MaxPoints:100 Weight:25 Category:Python exercises CategoryWeight:20>"] = x

grades_df.to_csv("../grades.csv")
